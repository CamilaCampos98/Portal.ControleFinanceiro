@page
@using System.Text.Json
@using System.Globalization
@model ResumoModel
@{
    var cultura = new CultureInfo("pt-BR");
    ViewData["Title"] = "Resumo por Pessoa e Período";

    var totaisPorCartao = new Dictionary<string, decimal>();

    if (Model.Resumo != null && Model.Resumo.ResumoPorCartaoTipo.Count > 0)
    {
         totaisPorCartao = Model.Resumo.ResumoPorCartaoTipo
            .GroupBy(x => x.Cartao)
            .ToDictionary(g => g.Key, g => g.Sum(x => x.Valor));
    }

    DateTime hoje = DateTime.Today;
    DateTime? dataMaisProxima = null;
    TimeSpan menorDiferenca = TimeSpan.MaxValue;

    if (Model.Resumo?.Compras != null)
    {
        foreach (var c in Model.Resumo.Compras)
        {
            if (c.TryGetValue("Data", out var objData))
            {
                DateTime dataCompra;

                if (objData is JsonElement jsonEl)
                {
                    // Se for string, tenta parsear
                    if (jsonEl.ValueKind == JsonValueKind.String && DateTime.TryParse(jsonEl.GetString(), out dataCompra))
                    {
                        var diferenca = (dataCompra - hoje).Duration();
                        if (diferenca < menorDiferenca)
                        {
                            menorDiferenca = diferenca;
                            dataMaisProxima = dataCompra;
                        }
                    }
                    // Se for número, tenta interpretar como ticks
                    else if (jsonEl.ValueKind == JsonValueKind.Number && jsonEl.TryGetInt64(out long ticks))
                    {
                        try
                        {
                            dataCompra = new DateTime(ticks);
                            var diferenca = (dataCompra - hoje).Duration();
                            if (diferenca < menorDiferenca)
                            {
                                menorDiferenca = diferenca;
                                dataMaisProxima = dataCompra;
                            }
                        }
                        catch
                        {
                            // Caso ticks estejam inválidos, ignora
                        }
                    }
                }
                // Caso objData já seja DateTime (raro nesse contexto)
                else if (objData is DateTime dt)
                {
                    var diferenca = (dt - hoje).Duration();
                    if (diferenca < menorDiferenca)
                    {
                        menorDiferenca = diferenca;
                        dataMaisProxima = dt;
                    }
                }
                // Caso objData seja string ou outro objeto
                else if (DateTime.TryParse(objData?.ToString(), out dataCompra))
                {
                    var diferenca = (dataCompra - hoje).Duration();
                    if (diferenca < menorDiferenca)
                    {
                        menorDiferenca = diferenca;
                        dataMaisProxima = dataCompra;
                    }
                }
            }
        }
    }
}

<style>
	#gridResumo th.pago-col,
	#gridResumo td.pago-col {
		display: none;
	}

    .valor-sigiloso {
    filter: blur(5px);
    color: #6c757d; /* Cinza */
    cursor: pointer;
    transition: filter 0.3s ease, color 0.3s ease;
}

.valor-sigiloso.revelado {
    filter: none;
    color: inherit;
}
</style>

<div class="main-container">
    <h2><i class="bi bi-bar-chart-line"></i> Resumo por Pessoa e Período</h2>

    @if (!string.IsNullOrEmpty(Model.Mensagem))
        {
            <div class="alert @(Model.Sucesso ? "alert-success" : "alert-danger") alert-dismissible fade show shadow-sm mt-3" role="alert">
                <pre class="m-0">@Model.Mensagem</pre>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

    <!-- Formulário de Filtro -->
    <form method="post" class="mb-4">
        <div class="row g-3">
            <div class="col-sm-12 col-md-4">
                <label class="form-label">Pessoa</label>
                <input asp-for="Filtro.Pessoa" id="filtroPessoa" class="form-control" />
            </div>
            <div class="col-sm-6 col-md-4">
                <label class="form-label">Período</label>
                <input asp-for="Filtro.Periodo" id="filtroPeriodo" placeholder="Ex.: 05/2025" class="form-control" />
            </div>
        </div>

        <button type="submit" class="btn btn-success mt-3 responsive-button">
            <i class="bi bi-search"></i> Buscar Resumo
        </button>
    </form>

    @if (Model.Resumo != null)
    {
        <div class="card shadow-sm mb-4">
            <div class="card-header card-header-custom">
                <h5 class="mb-0">
                    <i class="bi bi-cart-check"></i> Compras de <strong>@Model.Resumo.Pessoa</strong>
                </h5>
            </div>

            <div class="card-body">
               <div class="card-body">
                    <div class="row mb-3">
                         <div class="col-12 col-md"><strong>Período:</strong> @Model.Resumo.Periodo</div>
         
                         <div class="col-12 col-md"><strong>Salário:</strong> 
                             <span class="valor-sigiloso" onclick="toggleTodos()">
                                 @Model.Resumo.Salario.ToString("C", cultura)
                             </span>
                         </div>

                         <div class="col-12 col-md"><strong>Extras:</strong> 
                             <span class="valor-sigiloso" onclick="toggleTodos()">
                                 @Model.Resumo.Extras.ToString("C", cultura)
                             </span>
                         </div>

                         <div class="col-12 col-md"><strong>Gastos Fixos:</strong> 
                             <span class="valor-sigiloso" onclick="toggleTodos()">
                                 @Model.Resumo.GastosFixos.ToString("C", cultura)
                             </span>
                         </div>

                         <div class="col-12 col-md"><strong>Total Gasto:</strong> 
                             <span class="valor-sigiloso" onclick="toggleTodos()">
                                 @Model.Resumo.TotalGasto.ToString("C", cultura)
                             </span>
                         </div>

                         <div class="col-12 col-md">
                             <strong>Saldo:</strong> 
                             <span class="valor-sigiloso @(Model.Resumo.SaldoCritico ? "text-danger fw-bold" : "fw-bold text-success")" 
                                   onclick="toggleTodos()">
                                 @Model.Resumo.SaldoRestante.ToString("C", cultura)
                             </span>
                         </div>
                     </div>
                </div>


                
                    <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#modalResumoPorCartao">
                        <i class="bi bi-credit-card-2-front"></i> Resumo por Cartão
                    </button>
                    <div class="text-end mb-2">
			            <button id="btnTogglePago"
					            type="button"
					            class="btn btn-outline-secondary btn-sm">
				            <i class="bi bi-eye-slash" id="iconTogglePago"></i> Mostrar Valor
			            </button>
		            </div>
                

                @if (Model.Resumo.Compras.Any())
                {
                    <form id="formExcluir" method="post" asp-page-handler="Excluir">
                    	<input type="hidden" name="Id" id="formExcluir_Id" />
	                    <input type="hidden" name="MesAno" id="formExcluir_MesAno" />
                    </form>

                    <div class="table-responsive">
                        <table class="table table-bordered table-hover align-middle" id="gridResumo">
                            <thead>
                                <tr class="text-center">
                                    <th>ID</th>
                                    <th>Data</th>
                                    <th>Compra</th>
                                    <th class="pago-col" style="min-width: 120px;">Valor (R$)</th>
                                    <th>Forma Pgto</th>
                                    <th>Cartao</th>
                                    <th>Parcela</th>
                                    <th>Mês/Ano</th>
                                    <th style="display:none">Fonte</th>
                                    <th>Ações</th>
                                    
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var c in Model.Resumo.Compras)
                                {
                                    decimal valor = 0m;

                                    if (c["Valor"] is JsonElement el && el.ValueKind == JsonValueKind.Number)
                                    {
                                        valor = el.GetDecimal();
                                    }
                                    else if (c["Valor"] is JsonElement elStr && elStr.ValueKind == JsonValueKind.String)
                                    {
                                        // Caso venha como string, tenta parsear usando pt-BR
                                        if (decimal.TryParse(elStr.GetString(), NumberStyles.Number, new CultureInfo("pt-BR"), out var valParsed))
                                        {
                                            valor = valParsed;
                                        }
                                    }

                                    // Extrair dataAtualLinha da compra para usar na comparação
                                    DateTime dataAtualLinha = DateTime.MinValue;
                                    if (c.TryGetValue("Data", out var objData))
                                    {
                                        if (objData is JsonElement jsonEl)
                                        {
                                            if (jsonEl.ValueKind == JsonValueKind.String && DateTime.TryParse(jsonEl.GetString(), out var dt))
                                            {
                                                dataAtualLinha = dt;
                                            }
                                            else if (jsonEl.ValueKind == JsonValueKind.Number && jsonEl.TryGetInt64(out long ticks))
                                            {
                                                try
                                                {
                                                    dataAtualLinha = new DateTime(ticks);
                                                }
                                                catch { }
                                            }
                                        }
                                        else if (objData is DateTime dt)
                                        {
                                            dataAtualLinha = dt;
                                        }
                                        else if (DateTime.TryParse(objData?.ToString(), out var dt1))
                                        {
                                            dataAtualLinha = dt1;
                                        }
                                    }
                                    
                                    <tr class="text-center @(dataAtualLinha.Date == dataMaisProxima?.Date ? "table-primary linha-alvo" : "")">
                                        <td>@c["IdLan"]</td>
                                        <td>@DateTime.Parse(c["Data"].ToString()).ToString("dd/MM/yyyy")</td>
                                        <td class="text-start">@c["Compra"]</td>
                                        <td class="pago-col">R$ @valor.ToString("N2")</td>
                                        <td>@c["FormaPgto"]</td>
                                        <td>@c["Cartao"]</td>
                                        <td>@c["Parcela"]</td>
                                        <td>@c["MesAno"]</td>
                                        <td style="display:none">@c["Fonte"]</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning"
                                                    onclick="editarCompra('@c["IdLan"]')">
                                                <i class="bi bi-pencil-square"></i>
                                            </button>

                                             <button type="submit"
												form="formExcluir"
												class="btn btn-secondary btn-sm"
												onclick="return confirmarExcluir('@c["IdLan"]', '@c["MesAno"]');">
											<i class="bi bi-trash"></i>
										</button>
                                        </td>
                                        
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Paginação -->
                    <nav aria-label="Paginação de compras">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(Model.PaginaAtual == 1 ? "disabled" : "")">
                                <a class="page-link" asp-route-pagina="@(Model.PaginaAtual - 1)">Anterior</a>
                            </li>

                            @for (int i = 1; i <= Model.TotalPaginas; i++)
                            {
                                <li class="page-item @(i == Model.PaginaAtual ? "active" : "")">
                                    <a class="page-link" asp-route-pagina="@i">@i</a>
                                </li>
                            }

                            <li class="page-item @(Model.PaginaAtual == Model.TotalPaginas ? "disabled" : "")">
                                <a class="page-link" asp-route-pagina="@(Model.PaginaAtual + 1)">Próxima</a>
                            </li>
                        </ul>
                    </nav>

                    <div class="modal fade" id="modalEditarCompra" tabindex="-1" aria-labelledby="modalEditarCompraLabel" aria-hidden="true">
                      <div class="modal-dialog">
                        <div class="modal-content">
                          <form id="formEditarCompra" method="post" asp-page-handler="Editar">
                            <div class="modal-header">
                              <h5 class="modal-title" id="modalEditarCompraLabel">
                                <i class="bi bi-pencil-square"></i> Editar Compra
                              </h5>
                              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                            </div>
                            <div class="modal-body">
                              <!-- Campo escondido para IdLan -->
                              <input type="hidden" id="editIdLan" name="Compra.IdLan" />

                              <div class="mb-3">
                                <label class="form-label">Pessoa</label>
                                <input type="text" class="form-control" id="editPessoa" name="Compra.Pessoa" required />
                              </div>
                              <div class="mb-3">
                                <label class="form-label">Compra</label>
                                <input type="text" class="form-control" id="editCompra" name="Compra.Compra" required />
                              </div>

                              <div class="mb-3">
                                <label class="form-label">Valor (R$)</label>
                                <input type="number" step="0.01" class="form-control" id="editValor" name="Compra.Valor" required />
                              </div>

                              <div class="mb-3">
                                <label class="form-label">Forma Pgto</label>
                                <input type="text" class="form-control" id="editFormaPgto" name="Compra.FormaPgto" />
                              </div>

                              <div class="mb-3">
                                <label class="form-label">Cartão</label>
                                <input type="text" class="form-control" id="editCartao" name="Compra.Cartao" />
                              </div>

                              <div class="mb-3">
                                <label class="form-label">Parcela</label>
                                <input type="text" class="form-control" id="editParcela" name="Compra.Parcela" />
                              </div>

                              <div class="mb-3">
                               <label class="form-label">Data</label>
                               <input type="date" class="form-control" id="editData" name="Compra.Data" />
                             </div>
                            </div>
                            <div class="modal-footer">
                              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                              <button type="submit" class="btn btn-success">Salvar Alterações</button>
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>

                    <div class="modal fade" id="modalResumoPorCartao" tabindex="-1" aria-labelledby="modalResumoPorCartaoLabel" aria-hidden="true">
                        <div class="modal-dialog modal-xl modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="modalResumoPorCartaoLabel">
                                        <i class="bi bi-credit-card-2-front"></i> Resumo por Cartão
                                    </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                                </div>

                                <div class="modal-body">
                                    <div class="row">
                                        <!-- Grid 1 - Resumo por Cartão -->
                                        <div class="col-md-4">
                                            <div class="table-responsive">
                                                <table class="table table-bordered table-hover align-middle">
                                                    <thead class="table-primary">
                                                        <tr class="text-center">
                                                            <th>Cartão</th>
                                                            <th>Total (R$)</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in Model.Resumo.ResumoPorCartao)
                                                        {
                                                            <tr class="text-center">
                                                                <td class="text-start">@item.Key</td>
                                                                <td>R$ @item.Value.ToString("N2")</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>

                                        <!-- Grid 2 - Detalhe por Tipo (Titular / Adicional) -->
                                        <div class="col-md-8">
                                            <div class="table-responsive">
                                                <table class="table table-bordered table-hover align-middle">
                                                    <thead class="table-success">
                                                        <tr class="text-center">
                                                            <th>Cartão</th>
                                                            <th>Tipo</th>
                                                            <th>Total (R$)</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in Model.Resumo.ResumoPorCartaoTipo)
                                                        {
                                                            <tr class="text-center">
                                                                <td class="text-start">@item.Cartao</td>
                                                                <td>@item.Tipo</td>
                                                                <td>R$ @item.Valor.ToString("N2")</td>
                                                            </tr>
                                                        }
                                                         @foreach (var cartao in totaisPorCartao)
                                                        {
                                                            <tr class="fw-bold text-center table-light">
                                                                <td class="text-end" colspan="2">Total @cartao.Key:</td>
                                                                <td>R$ @cartao.Value.ToString("N2")</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                        <i class="bi bi-x-circle"></i> Fechar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-warning">
                        Nenhuma compra encontrada neste período.
                    </div>
                }

                <!-- Botão de limpar -->
                <form method="post" asp-page-handler="LimparSessao">
                    <button type="submit" class="btn btn-danger mt-3 responsive-button">
                        <i class="bi bi-x-circle"></i> Limpar Resumo
                    </button>
                </form>
            </div>
            
        </div>


    }

</div>
<div class="loading-overlay" id="loadingOverlay">
	<div>
		<div class="spinner-border text-primary" role="status"></div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
<script src="https://unpkg.com/imask"></script>

<script>

    function confirmarExcluir(id, mesAno) {
			if (confirm(`Deseja realmente excluir o id '${id}' do mês ${mesAno}?`)) {
				document.getElementById('formExcluir_Id').value = id;
				document.getElementById('formExcluir_MesAno').value = mesAno;
				return true;
			}
			return false;
		}

     window.addEventListener("DOMContentLoaded", function () {
            const alvo = document.querySelector(".linha-alvo");
            if (alvo) {
                alvo.scrollIntoView({ behavior: "smooth", block: "center" });
            }
        });

        window.onload = function() {
      var elemento = document.getElementById('filtroPeriodo');
      if (elemento) {
        IMask(elemento, {
          mask: '00/0000',
          placeholderChar: '_',
        });
      }
    }

    document.addEventListener('DOMContentLoaded', function () {
		const overlay = document.getElementById('loadingOverlay');

		const forms = document.querySelectorAll('form');
		const buttons = document.querySelectorAll('form button[type="submit"]');

		forms.forEach(form => {
			form.addEventListener('submit', function () {
				// Ativa overlay
				overlay.style.display = 'flex';

				// Ativa loading nos botões do formulário
				const btns = form.querySelectorAll('button[type="submit"]');
				btns.forEach(btn => {
					btn.classList.add('btn-loading');
				});
			});
		});
	});

    document.addEventListener('DOMContentLoaded', function () {
		const btn = document.getElementById('btnTogglePago');
		const icon = document.getElementById('iconTogglePago');
		let isVisible = false;

		btn.addEventListener('click', function () {
			const ths = document.querySelectorAll('#gridResumo th.pago-col');
			const tds = document.querySelectorAll('#gridResumo td.pago-col');

			isVisible = !isVisible;

			ths.forEach(th => {
				th.style.display = isVisible ? 'table-cell' : 'none';
			});

			tds.forEach(td => {
				td.style.display = isVisible ? 'table-cell' : 'none';
			});

			if (isVisible) {
				icon.classList.remove('bi-eye-slash');
				icon.classList.add('bi-eye');
				btn.innerHTML = '<i class="bi bi-eye" id="iconTogglePago"></i> Ocultar Valor';
			} else {
				icon.classList.remove('bi-eye');
				icon.classList.add('bi-eye-slash');
				btn.innerHTML = '<i class="bi bi-eye-slash" id="iconTogglePago"></i> Mostrar Valor';
			}
		});
	});

    function toggleTodos() {
        const valores = document.querySelectorAll('.valor-sigiloso');
        const algumRevelado = Array.from(valores).some(v => v.classList.contains('revelado'));

        valores.forEach(v => {
            if (algumRevelado) {
                v.classList.remove('revelado');
            } else {
                v.classList.add('revelado');
            }
        });
    }

    function editarCompra(idLan) {
        const row = Array.from(document.querySelectorAll('#gridResumo tbody tr'))
                          .find(tr => tr.children[0].innerText == idLan);

        const pessoa = document.getElementById('filtroPessoa').value;

        if (row) {
            const dadosCompra = {
                idLan: idLan,
                pessoa: pessoa,
                compra: row.children[2].innerText,
                valor: parseFloat(row.children[3].innerText.replace('R$', '').trim().replace('.', '').replace(',', '.')),
                formaPgto: row.children[4].innerText,
                cartao: row.children[5].innerText,
                parcela: row.children[6].innerText,
                data: row.children[1].innerText // data está na coluna 1, talvez precise converter
            };

            abrirModalEditarCompra(dadosCompra);
        }
    }


    function abrirModalEditarCompra(dadosCompra) {
        document.getElementById('editIdLan').value = dadosCompra.idLan || '';
        document.getElementById('editCompra').value = dadosCompra.compra || '';
        document.getElementById('editPessoa').value = dadosCompra.pessoa || '';
        document.getElementById('editValor').value = dadosCompra.valor ?? '';
        document.getElementById('editFormaPgto').value = dadosCompra.formaPgto || '';
        document.getElementById('editCartao').value = dadosCompra.cartao || '';
         document.getElementById('editParcela').value = dadosCompra.parcela || '';

        // Tratamento da data
        let dataFormatada = '';
        if (dadosCompra.data) {
            if (typeof dadosCompra.data === 'string' && dadosCompra.data.includes('/')) {
                // Caso a data esteja no formato "dd/MM/yyyy"
                const partes = dadosCompra.data.split('/');
                if (partes.length === 3) {
                    const dia = partes[0].padStart(2, '0');
                    const mes = partes[1].padStart(2, '0');
                    const ano = partes[2];
                    dataFormatada = `${ano}-${mes}-${dia}`;
                }
            } else {
                // Caso a data esteja no formato Date ou ISO (ex.: "2025-06-03")
                const dateObj = new Date(dadosCompra.data);
                if (!isNaN(dateObj)) {
                    dataFormatada = dateObj.toISOString().split('T')[0];
                }
            }
        }

        document.getElementById('editData').value = dataFormatada;

        var modal = new bootstrap.Modal(document.getElementById('modalEditarCompra'));
        modal.show();
    }


</script>
